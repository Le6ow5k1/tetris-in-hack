class Block {
  field Shape shape;
  field int x, y;
  field int shapeNum, currentRotation;
  field boolean reachedBottom;

  constructor Block new(Shape shapeIn, int xIn, int yIn) {
    let shape = shapeIn;
    let x = xIn;
    let y = yIn;
    let reachedBottom = false;

    let shapeNum = shapeIn.num();
    let currentRotation = shapeIn.rotation();

    return this;
  }

  method boolean reachedBottom() {
    return reachedBottom;
  }

  method void draw(boolean color) {
    var int pixelsInSquare, rowIdx, colIdx;
    var String row;
    var char drawSquare;
    var int drawX, drawY;

    let rowIdx = 0;

    while (rowIdx < shape.heightSquares()) {
      let colIdx = 0;

      while (colIdx < shape.widthSquares()) {
        if (shape.needDrawSquare(rowIdx, colIdx)) {
          let drawX = x + (Shape.pixelsInSquare() * colIdx);
          let drawY = y + (Shape.pixelsInSquare() * rowIdx);

          do Screen.setColor(color);
          do Screen.drawRectangle(drawX, drawY, drawX + Shape.pixelsInSquare(), drawY + Shape.pixelsInSquare());
        }

        let colIdx = colIdx + 1;
      }

      let rowIdx = rowIdx + 1;
    }

    return;
  }

  method void moveDown() {
    var int oldY;

    let oldY = y;
    let y = y + Shape.pixelsInSquare();

    if (touchesBottomLine()) {
      let y = oldY;
      let reachedBottom = true;
    }

    return;
  }

  method void moveLeft() {
    var int oldX;

    let oldX = x;
    let x = x - Shape.pixelsInSquare();

    if (touchesLeftLine()) {
      let x = oldX;
    }

    return;
  }

  method void moveRight() {
    var int oldX;

    let oldX = x;
    let x = x + Shape.pixelsInSquare();

    if (touchesRightLine()) {
      let x = oldX;
    }

    return;
  }

  method void rotate() {
    var int rotation;
    var Shape originalShape, rotatedShape;
    var boolean shapeOutOfBounds;

    if (currentRotation = 270) {
      let rotation = 0;
    }
    if (~(currentRotation = 270)) {
      let rotation = currentRotation + 90;
    }

    let originalShape = shape;
    let rotatedShape = Shape.new(shapeNum, currentRotation);
    let shape = rotatedShape;

    let shapeOutOfBounds = outOfBounds();
    if (shapeOutOfBounds) {
      if (touchesBottomLine()) {
        let reachedBottom = true;
      }

      let shape = originalShape;
      do rotatedShape.dispose();
    }
    if (~(shapeOutOfBounds)) {
      let currentRotation = rotation;
      do originalShape.dispose();
    }

    return;
  }

  method boolean outOfBounds() {
    return touchesRightLine() | touchesLeftLine() | touchesBottomLine();
  }

  method boolean touchesBottomLine() {
    return touchesLine(Field.minX(), Field.maxY() + Shape.pixelsInSquare(), Field.maxX(), Field.maxY() + Shape.pixelsInSquare());
  }

  method boolean touchesLeftLine() {
    return touchesLine(Field.minX() - Shape.pixelsInSquare(), Field.minY(), Field.minX() - Shape.pixelsInSquare(), Field.maxY());
  }

  method boolean touchesRightLine() {
    return touchesLine(Field.maxX() + Shape.pixelsInSquare(), Field.minY(), Field.maxX() + Shape.pixelsInSquare(), Field.maxY());
  }

  method boolean touchesLine(int lineX1, int lineY1, int lineX2, int lineY2) {
    var int relX1, relY1, relX2, relY2;

    let relX1 = lineX1 - x;
    let relY1 = lineY1 - y;
    let relX2 = lineX2 - x;
    let relY2 = lineY2 - y;

    return shape.touchesLine(relX1, relY1, relX2, relY2);
  }
}
